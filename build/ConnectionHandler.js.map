{
  "version": 3,
  "sources": ["../src/ConnectionHandler.ts"],
  "sourcesContent": ["import * as Bonjour from 'mdns';\nimport { AdapterInstance } from '@iobroker/adapter-core';\n\nimport airtunes2 from 'airtunes2';\nimport { spawn } from 'child_process';\nimport internal from 'node:stream';\nimport AirPlayDevice = AirTunes.AirPlayDevice;\n\nexport class ConnectionHandler {\n    #adapter: AdapterInstance;\n    #airPlay: airtunes2;\n    #browser: Bonjour.Browser;\n    #ffmpeg: internal.Readable | null = null;\n\n    constructor(adapter: AdapterInstance) {\n        this.#adapter = adapter;\n        this.#airPlay = new airtunes2();\n        this.#browser = Bonjour.createBrowser(Bonjour.tcp('airplay'));\n    }\n\n    async startDiscovery(): Promise<void> {\n        this.#browser.on('serviceUp', async (service: Bonjour.Service) => {\n            try {\n                await this.createDevice(service);\n                this.setDeviceInformation(service);\n                this.setDeviceAvailable(service, true);\n            } catch (exception) {\n                this.#adapter.log.error('Cannot create device! ' + service + ' ' + exception);\n            }\n        });\n\n        this.#browser.on('serviceDown', async (service) => {\n            try {\n                await this.createDevice(service);\n                this.setDeviceInformation(service);\n                this.setDeviceAvailable(service, false);\n                this.setDeviceOnAir(service.txtRecord.deviceid, false);\n            } catch (exception) {\n                this.#adapter.log.error('Cannot create device! ' + JSON.stringify(service) + ' ' + exception);\n            }\n        });\n\n        this.#browser.start();\n        this.#adapter.setState('info.connection', true, true);\n    }\n\n    async stopDiscovery(): Promise<void> {\n        await this.#browser.stop();\n        this.#airPlay.stopAll(() => {\n        });\n\n        this.#adapter.setState('devices.*.on-air', false, true);\n    }\n\n    async playFile(path: string): Promise<void> {\n\n        const currentPid = (await this.#adapter.getStateAsync('stream.filePid'))?.val;\n\n        // this.#airPlay.end();\n        // this.#airPlay.stopAll(() => {});\n        this.#airPlay.reset();\n\n        if (currentPid !== null) {\n            try {\n                // @ts-ignore\n                process.kill(currentPid);\n\n                if (this.#ffmpeg !== null) {\n                    // @ts-ignore\n                    this.#ffmpeg.unpipe(this.#airPlay);\n                }\n            } catch (exception) {\n                this.#adapter.log.warn(`FFMPEG process with PID ${currentPid} could not be killed. Is it still there?`);\n            }\n\n            await this.#adapter.setState('stream.filePid', null);\n        }\n\n        const ffmpeg = spawn(`ffmpeg`, [\n            '-i',\n            path,\n            '-acodec',\n            'pcm_s16le',\n            '-f',\n            's16le',\n            '-ar',\n            '44100',\n            '-ac',\n            '2',\n            'pipe:1',\n        ]);\n\n        await this.#adapter.setState('stream.filePid', ffmpeg.pid ?? null, true);\n\n\n        this.#ffmpeg = ffmpeg.stdout;\n\n        // @ts-ignore\n        ffmpeg.stdout.pipe(this.#airPlay);\n    }\n\n    async createDevice(service: Bonjour.Service): Promise<void> {\n        const devicePrefix = this.getDevicePrefix(service);\n\n        await this.#adapter.extendObject(`${devicePrefix}.name`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'Name',\n                    en: 'Name',\n                },\n                type: 'string',\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.host`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'Host-Adresse',\n                    en: 'Hostname',\n                },\n                type: 'string',\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.ip`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'IP-Adresse',\n                    en: 'IP-Adress',\n                },\n                type: 'string',\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.port`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'IP-Adresse',\n                    en: 'IP-Address',\n                },\n                type: 'number',\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.volume`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'Lautst\u00E4rke',\n                    en: 'Volume',\n                },\n                min : 0,\n                max : 100,\n                def : 0,\n                type: 'number',\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.available`, {\n            type  : 'state',\n            common: {\n                name : {\n                    de: 'Verf\u00FCgbar',\n                    en: 'Available',\n                },\n                type : 'boolean',\n                role : 'indicator.connected',\n                write: false,\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.on-air`, {\n            type  : 'state',\n            common: {\n                name  : {\n                    de: 'Auf Sendung',\n                    en: 'On-Air',\n                },\n                type  : 'boolean',\n                def   : false,\n                defAck: true,\n            },\n        });\n\n        await this.#adapter.extendObject(`${devicePrefix}.txtRecord`, {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'Txt-Eintrag',\n                    en: 'Txt-Record',\n                },\n                type: 'string',\n            },\n        });\n\n        await this.#adapter.subscribeStatesAsync('devices.*.on-air');\n        await this.#adapter.subscribeStatesAsync('devices.*.volume');\n    }\n\n    async setDeviceOnAir(deviceId: string, state: boolean): Promise<void> {\n        const devicePrefix = this.getDevicePrefixById(deviceId);\n\n        const ip        = (await this.#adapter.getStateAsync(devicePrefix + '.ip'))?.val;\n        const port      = (await this.#adapter.getStateAsync(devicePrefix + '.port'))?.val;\n        const volume    = (await this.#adapter.getStateAsync(devicePrefix + '.volume'))?.val;\n        const txtRecord = (await this.#adapter.getStateAsync(devicePrefix + '.txtRecord'))?.val;\n\n        if (typeof ip !== 'string') {\n            return;\n        }\n\n        if (typeof port !== 'number') {\n            return;\n        }\n\n        if (typeof volume !== 'number') {\n            return;\n        }\n\n        if (typeof txtRecord !== 'string') {\n            return;\n        }\n\n        if (state) {\n            // @ts-ignore\n            const deviceOptions: AirPlayDevice = {\n                port    : port,\n                volume  : volume,\n                airplay2: true,\n                txt     : JSON.parse(txtRecord),\n            };\n\n            const device = this.#airPlay.add(ip, deviceOptions);\n            device.on('status', (status) => {\n                console.log(`Devices status (${ip}): ${status}`);\n                switch (status) {\n                    case 'stopped': {\n                        this.#adapter.setState(devicePrefix + '.on-air', false, true);\n                        break;\n                    }\n                }\n            });\n\n            await this.#adapter.setState(devicePrefix + '.on-air', true, true);\n\n            return;\n        }\n\n        const deviceKey = `${ip}:${port}`;\n        this.#airPlay.stop(deviceKey, () => {\n        });\n    }\n\n    async setVolume(deviceId: string, volume: number): Promise<void> {\n        const devicePrefix = this.getDevicePrefixById(deviceId);\n\n        const ip   = (await this.#adapter.getStateAsync(devicePrefix + '.ip'))?.val;\n        const port = (await this.#adapter.getStateAsync(devicePrefix + '.port'))?.val;\n\n        const deviceKey = `${ip}:${port}`;\n\n        this.#adapter.setState(devicePrefix + '.volume', volume, true);\n\n        this.#airPlay.setVolume(deviceKey, volume.toString(), () => {\n        });\n    }\n\n    private setDeviceInformation(service: Bonjour.Service): void {\n        const txtRecordArray = [];\n\n        for (const [key, value] of Object.entries(service.txtRecord)) {\n            txtRecordArray.push(`${key}=${value}`);\n        }\n\n        this.#adapter.setState(this.getDevicePrefix(service) + '.name', service.name ?? 'Unknown', true);\n        this.#adapter.setState(this.getDevicePrefix(service) + '.host', service.host, true);\n        this.#adapter.setState(this.getDevicePrefix(service) + '.port', service.port, true);\n        this.#adapter.setState(this.getDevicePrefix(service) + '.txtRecord', JSON.stringify(txtRecordArray), true);\n\n        this.#adapter.setState(this.getDevicePrefix(service) + '.ip', null, true);\n\n        service.addresses.forEach((address) => {\n            // Checking for a IPv4 address\n            if (address.match(/[0-1]?[0-9]{1,2}\\.[0-1]?[0-9]{1,2}\\.[0-1]?[0-9]{1,2}\\.[0-1]?[0-9]{1,2}/)) {\n                this.#adapter.setState(this.getDevicePrefix(service) + '.ip', address, true);\n            }\n        });\n    }\n\n    private setDeviceAvailable(service: Bonjour.Service, available: boolean): void {\n        this.#adapter.setState(this.getDevicePrefix(service) + '.available', available, true);\n    }\n\n    private getDevicePrefixById(deviceId: string) {\n        return `devices.${deviceId}`;\n    }\n\n    private getDevicePrefix(service: Bonjour.Service): string {\n        /*\n         * AirPlay txt-record structure, may differ for other services!:\n         *\n         * {\n         *   acl: '0',\n         *   btaddr: '45:80:E2:A4:AE:8F',\n         *   deviceid: 'A8:51:AB:2C:E1:C0',\n         *   fex: '1d9/St5/F7w4oQY',\n         *   features: '0x4A7FDFD5,0xBC177FDE',\n         *   flags: '0x18644',\n         *   gid: 'F4562D04-41AA-54B4-BBD7-2CE8FF12AC2C',\n         *   igl: '1',\n         *   gcgl: '1',\n         *   gpn: 'Arbeitszimmer TV',\n         *   psgsz: '3',\n         *   psgtp: '1',\n         *   psgid: 'F4562D04-41AA-54B4-BBD7-2CE8FF12AC2C',\n         *   pgm: '1',\n         *   pgmid: '0',\n         *   model: 'AppleTV14,1',\n         *   protovers: '1.1',\n         *   pi: '3164ab1a-05a0-4537-9402-5824d021d664',\n         *   psi: '08F74563-D92B-4ED1-8249-14F2A77E4A5A',\n         *   pk: '6c4a26b39ecdd544c2508190b3dc7a0d7bfbb1fec9efa13e10627db5cb4c5833',\n         *   srcvers: '775.3.1',\n         *   osvers: '17.6.1',\n         *   vv: '1'\n         * }\n         */\n\n        if (!service.txtRecord?.hasOwnProperty('deviceid')) {\n            throw new Error('Cannot create device, because it has no device id!');\n        }\n\n        return `devices.${service.txtRecord?.deviceid}`;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAyB;AAGzB,uBAAsB;AACtB,2BAAsB;AAJtB;AAQO,MAAM,kBAAkB;AAAA,EAM3B,YAAY,SAA0B;AALtC;AACA;AACA;AACA,gCAAoC;AAGhC,uBAAK,UAAW;AAChB,uBAAK,UAAW,IAAI,iBAAAA,QAAU;AAC9B,uBAAK,UAAW,QAAQ,cAAc,QAAQ,IAAI,SAAS,CAAC;AAAA,EAChE;AAAA,EAEA,MAAM,iBAAgC;AAClC,uBAAK,UAAS,GAAG,aAAa,OAAO,YAA6B;AAC9D,UAAI;AACA,cAAM,KAAK,aAAa,OAAO;AAC/B,aAAK,qBAAqB,OAAO;AACjC,aAAK,mBAAmB,SAAS,IAAI;AAAA,MACzC,SAAS,WAAW;AAChB,2BAAK,UAAS,IAAI,MAAM,2BAA2B,UAAU,MAAM,SAAS;AAAA,MAChF;AAAA,IACJ,CAAC;AAED,uBAAK,UAAS,GAAG,eAAe,OAAO,YAAY;AAC/C,UAAI;AACA,cAAM,KAAK,aAAa,OAAO;AAC/B,aAAK,qBAAqB,OAAO;AACjC,aAAK,mBAAmB,SAAS,KAAK;AACtC,aAAK,eAAe,QAAQ,UAAU,UAAU,KAAK;AAAA,MACzD,SAAS,WAAW;AAChB,2BAAK,UAAS,IAAI,MAAM,2BAA2B,KAAK,UAAU,OAAO,IAAI,MAAM,SAAS;AAAA,MAChG;AAAA,IACJ,CAAC;AAED,uBAAK,UAAS,MAAM;AACpB,uBAAK,UAAS,SAAS,mBAAmB,MAAM,IAAI;AAAA,EACxD;AAAA,EAEA,MAAM,gBAA+B;AACjC,UAAM,mBAAK,UAAS,KAAK;AACzB,uBAAK,UAAS,QAAQ,MAAM;AAAA,IAC5B,CAAC;AAED,uBAAK,UAAS,SAAS,oBAAoB,OAAO,IAAI;AAAA,EAC1D;AAAA,EAEA,MAAM,SAAS,MAA6B;AAtDhD;AAwDQ,UAAM,cAAc,WAAM,mBAAK,UAAS,cAAc,gBAAgB,MAAlD,mBAAsD;AAI1E,uBAAK,UAAS,MAAM;AAEpB,QAAI,eAAe,MAAM;AACrB,UAAI;AAEA,gBAAQ,KAAK,UAAU;AAEvB,YAAI,mBAAK,aAAY,MAAM;AAEvB,6BAAK,SAAQ,OAAO,mBAAK,SAAQ;AAAA,QACrC;AAAA,MACJ,SAAS,WAAW;AAChB,2BAAK,UAAS,IAAI,KAAK,2BAA2B,UAAU,0CAA0C;AAAA,MAC1G;AAEA,YAAM,mBAAK,UAAS,SAAS,kBAAkB,IAAI;AAAA,IACvD;AAEA,UAAM,aAAS,4BAAM,UAAU;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,SAAS,mBAAkB,YAAO,QAAP,YAAc,MAAM,IAAI;AAGvE,uBAAK,SAAU,OAAO;AAGtB,WAAO,OAAO,KAAK,mBAAK,SAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,aAAa,SAAyC;AACxD,UAAM,eAAe,KAAK,gBAAgB,OAAO;AAEjD,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,SAAS;AAAA,MACrD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,SAAS;AAAA,MACrD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,OAAO;AAAA,MACnD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,SAAS;AAAA,MACrD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,WAAW;AAAA,MACvD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,KAAM;AAAA,QACN,KAAM;AAAA,QACN,KAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,cAAc;AAAA,MAC1D,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAO;AAAA,UACH,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAO;AAAA,QACP,MAAO;AAAA,QACP,OAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,WAAW;AAAA,MACvD,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAQ;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAQ;AAAA,QACR,KAAQ;AAAA,QACR,QAAQ;AAAA,MACZ;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,aAAa,GAAG,YAAY,cAAc;AAAA,MAC1D,MAAQ;AAAA,MACR,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,QACR;AAAA,QACA,MAAM;AAAA,MACV;AAAA,IACJ,CAAC;AAED,UAAM,mBAAK,UAAS,qBAAqB,kBAAkB;AAC3D,UAAM,mBAAK,UAAS,qBAAqB,kBAAkB;AAAA,EAC/D;AAAA,EAEA,MAAM,eAAe,UAAkB,OAA+B;AA3M1E;AA4MQ,UAAM,eAAe,KAAK,oBAAoB,QAAQ;AAEtD,UAAM,MAAa,WAAM,mBAAK,UAAS,cAAc,eAAe,KAAK,MAAtD,mBAA0D;AAC7E,UAAM,QAAa,WAAM,mBAAK,UAAS,cAAc,eAAe,OAAO,MAAxD,mBAA4D;AAC/E,UAAM,UAAa,WAAM,mBAAK,UAAS,cAAc,eAAe,SAAS,MAA1D,mBAA8D;AACjF,UAAM,aAAa,WAAM,mBAAK,UAAS,cAAc,eAAe,YAAY,MAA7D,mBAAiE;AAEpF,QAAI,OAAO,OAAO,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,OAAO,SAAS,UAAU;AAC1B;AAAA,IACJ;AAEA,QAAI,OAAO,WAAW,UAAU;AAC5B;AAAA,IACJ;AAEA,QAAI,OAAO,cAAc,UAAU;AAC/B;AAAA,IACJ;AAEA,QAAI,OAAO;AAEP,YAAM,gBAA+B;AAAA,QACjC;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV,KAAU,KAAK,MAAM,SAAS;AAAA,MAClC;AAEA,YAAM,SAAS,mBAAK,UAAS,IAAI,IAAI,aAAa;AAClD,aAAO,GAAG,UAAU,CAAC,WAAW;AAC5B,gBAAQ,IAAI,mBAAmB,EAAE,MAAM,MAAM,EAAE;AAC/C,gBAAQ,QAAQ;AAAA,UACZ,KAAK,WAAW;AACZ,+BAAK,UAAS,SAAS,eAAe,WAAW,OAAO,IAAI;AAC5D;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,YAAM,mBAAK,UAAS,SAAS,eAAe,WAAW,MAAM,IAAI;AAEjE;AAAA,IACJ;AAEA,UAAM,YAAY,GAAG,EAAE,IAAI,IAAI;AAC/B,uBAAK,UAAS,KAAK,WAAW,MAAM;AAAA,IACpC,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,UAAU,UAAkB,QAA+B;AAjQrE;AAkQQ,UAAM,eAAe,KAAK,oBAAoB,QAAQ;AAEtD,UAAM,MAAQ,WAAM,mBAAK,UAAS,cAAc,eAAe,KAAK,MAAtD,mBAA0D;AACxE,UAAM,QAAQ,WAAM,mBAAK,UAAS,cAAc,eAAe,OAAO,MAAxD,mBAA4D;AAE1E,UAAM,YAAY,GAAG,EAAE,IAAI,IAAI;AAE/B,uBAAK,UAAS,SAAS,eAAe,WAAW,QAAQ,IAAI;AAE7D,uBAAK,UAAS,UAAU,WAAW,OAAO,SAAS,GAAG,MAAM;AAAA,IAC5D,CAAC;AAAA,EACL;AAAA,EAEQ,qBAAqB,SAAgC;AA/QjE;AAgRQ,UAAM,iBAAiB,CAAC;AAExB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,SAAS,GAAG;AAC1D,qBAAe,KAAK,GAAG,GAAG,IAAI,KAAK,EAAE;AAAA,IACzC;AAEA,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,UAAS,aAAQ,SAAR,YAAgB,WAAW,IAAI;AAC/F,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,SAAS,QAAQ,MAAM,IAAI;AAClF,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,SAAS,QAAQ,MAAM,IAAI;AAClF,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,cAAc,KAAK,UAAU,cAAc,GAAG,IAAI;AAEzG,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,OAAO,MAAM,IAAI;AAExE,YAAQ,UAAU,QAAQ,CAAC,YAAY;AAEnC,UAAI,QAAQ,MAAM,wEAAwE,GAAG;AACzF,2BAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,OAAO,SAAS,IAAI;AAAA,MAC/E;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,mBAAmB,SAA0B,WAA0B;AAC3E,uBAAK,UAAS,SAAS,KAAK,gBAAgB,OAAO,IAAI,cAAc,WAAW,IAAI;AAAA,EACxF;AAAA,EAEQ,oBAAoB,UAAkB;AAC1C,WAAO,WAAW,QAAQ;AAAA,EAC9B;AAAA,EAEQ,gBAAgB,SAAkC;AA7S9D;AA4UQ,QAAI,GAAC,aAAQ,cAAR,mBAAmB,eAAe,cAAa;AAChD,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACxE;AAEA,WAAO,YAAW,aAAQ,cAAR,mBAAmB,QAAQ;AAAA,EACjD;AACJ;AAzUI;AACA;AACA;AACA;",
  "names": ["airtunes2"]
}

{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { ConnectionHandler } from './ConnectionHandler';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Airplay extends utils.Adapter {\n    #connectionHandler: ConnectionHandler | null = null;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'airplay',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // Reset the connection indicator during startup\n        this.setState('info.connection', false, true);\n\n        this.#connectionHandler = new ConnectionHandler(this);\n\n        await this.createStreamState();\n        await this.#connectionHandler.startDiscovery();\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info('config option1: ' + this.config.option1);\n        this.log.info('config option2: ' + this.config.option2);\n\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            this.#connectionHandler?.stopDiscovery();\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\n            if (state.ack) {\n                return;\n            }\n\n            if (id.match(/airplay\\.\\d+\\.devices\\.+/)) {\n                this.updateDeviceStates(id, state);\n            }\n\n            if (id.match(/airplay\\.\\d+\\.stream\\.+/)) {\n                const cleanedPath = id.replaceAll(/^airplay\\.\\d+\\.stream\\./g, '');\n\n                switch (cleanedPath) {\n                    case 'file': {\n                        if (typeof state.val !== 'string') {\n                            break;\n                        }\n                        this.#connectionHandler?.playFile(state.val);\n                        break;\n                    }\n                }\n            }\n\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    private updateDeviceStates(id: string, state: ioBroker.State): void {\n        const cleanedPath = id.replaceAll(/^airplay\\.\\d+\\.devices\\./g, '');\n\n        const pathParts = cleanedPath.split('.');\n\n        const deviceId = pathParts.shift();\n        const subId    = pathParts.join('.');\n\n        // const deviceId  = nameSplit[5];\n        // const subId     = nameSplit[6];\n        //\n        if (this.#connectionHandler === null || deviceId === undefined) {\n            return;\n        }\n\n        switch (subId) {\n            case 'on-air': {\n                if (typeof state.val !== 'boolean') {\n                    return;\n                }\n                this.#connectionHandler.setDeviceOnAir(deviceId, state.val);\n                break;\n            }\n            case 'volume': {\n                if (typeof state.val !== 'number') {\n                    return;\n                }\n                this.#connectionHandler.setVolume(deviceId, state.val);\n                break;\n            }\n        }\n    }\n\n    private async createStreamState(): Promise<void> {\n        await this.extendObjectAsync('stream.file', {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'Datei',\n                    en: 'File',\n                },\n                type: 'string',\n            },\n        });\n        await this.extendObjectAsync('stream.filePid', {\n            type  : 'state',\n            common: {\n                name: {\n                    de: 'PID von FFMPEG Prozess',\n                    en: 'PID of FFMPEG process',\n                },\n                type: 'number',\n            },\n        });\n\n        this.subscribeStates('stream.*');\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Airplay(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Airplay())();\n}\n"],
  "mappings": "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",
  "names": []
}
